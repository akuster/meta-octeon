From b55ee5d659ae051e86559b65fe3d2196d4420f66 Mon Sep 17 00:00:00 2001
From: Armin Kuster <akuster@mvista.com>
Date: Fri, 11 Sep 2015 16:35:25 -0700
Subject: [PATCH 3/5] Octeon: update error-tree to latest SDK

Signed-off-by: Armin Kuster <akuster@mvista.com>
---
 arch/mips/cavium-octeon/octeon-error-tree.c | 53 +++++++++++++++++++----------
 1 file changed, 35 insertions(+), 18 deletions(-)

diff --git a/arch/mips/cavium-octeon/octeon-error-tree.c b/arch/mips/cavium-octeon/octeon-error-tree.c
index fd8dcbd..d0c1322 100644
--- a/arch/mips/cavium-octeon/octeon-error-tree.c
+++ b/arch/mips/cavium-octeon/octeon-error-tree.c
@@ -276,6 +276,7 @@ static int __init octeon_error_tree_init(void)
 arch_initcall(octeon_error_tree_init);
 
 static int octeon_78xx_tree_size;
+static struct cvmx_error_78xx *octeon_78xx_error_array;
 static void octeon_error_tree_handler78(int node, int intsn)
 {
 	int idx, prev_low, prev_high;
@@ -287,8 +288,8 @@ static void octeon_error_tree_handler78(int node, int intsn)
 	idx = octeon_78xx_tree_size / 2;
 
 	/* Try to do a binary search */
-	while (prev_low < prev_high && error_array_cn78xxp1[idx].intsn != intsn) {
-		if (error_array_cn78xxp1[idx].intsn < intsn) {
+	while (prev_low < prev_high && octeon_78xx_error_array[idx].intsn != intsn) {
+		if (octeon_78xx_error_array[idx].intsn < intsn) {
 			prev_low = idx + 1;
 			idx += (prev_high - idx) / 2;
 			if (idx < prev_low)
@@ -300,14 +301,14 @@ static void octeon_error_tree_handler78(int node, int intsn)
 				idx = prev_high;
 		}
 	}
-	if (error_array_cn78xxp1[idx].intsn == intsn) {
-		snprintf(msg, sizeof(msg), error_array_cn78xxp1[idx].err_mesg,
-			 error_array_cn78xxp1[idx].block_csr, error_array_cn78xxp1[idx].block_csr_bitpos);
+	if (octeon_78xx_error_array[idx].intsn == intsn) {
+		snprintf(msg, sizeof(msg), octeon_78xx_error_array[idx].err_mesg,
+			 octeon_78xx_error_array[idx].block_csr, octeon_78xx_error_array[idx].block_csr_bitpos);
 		pr_err("Node-%d: %s\n", node, msg);
-		if (error_array_cn78xxp1[idx].block_csr) {
+		if (octeon_78xx_error_array[idx].block_csr) {
 			u64 clear_addr;
-			clear_addr = 0x8000000000000000ull | error_array_cn78xxp1[idx].block_csr;
-			cvmx_write_csr_node(node, clear_addr, 1ull << error_array_cn78xxp1[idx].block_csr_bitpos);
+			clear_addr = 0x8000000000000000ull | octeon_78xx_error_array[idx].block_csr;
+			cvmx_write_csr_node(node, clear_addr, 1ull << octeon_78xx_error_array[idx].block_csr_bitpos);
 		}
 	} else {
 		pr_err("ERROR: Unknown intsn 0x%x\n", intsn);
@@ -323,31 +324,47 @@ int octeon_error_tree_shutdown(void)
 		return 0;
 
 	for_each_online_node(node) {
-		for (i = 0; error_array_cn78xxp1[i].intsn < 0xfffff; i++) {
-			if (error_array_cn78xxp1[i].error_group != CVMX_ERROR_GROUP_ETHERNET)
-				octeon_ciu3_errbits_disable_intsn(node, error_array_cn78xxp1[i].intsn);
+		for (i = 0; octeon_78xx_error_array[i].intsn < 0xfffff; i++) {
+			if (octeon_78xx_error_array[i].error_group != CVMX_ERROR_GROUP_ETHERNET)
+				octeon_ciu3_errbits_disable_intsn(node, octeon_78xx_error_array[i].intsn);
 		}
 	}
 
-	return 0;
+       return 0;
 }
 EXPORT_SYMBOL(octeon_error_tree_shutdown);
 
 static int __init octeon_error_tree_init78(void)
 {
 	int i, node;
+	u32 prid = read_c0_prid();
+	struct cvmx_error_array *array = octeon_error_arrays;
+
 	if (disable || !octeon_has_feature(OCTEON_FEATURE_CIU3))
 		return 0;
 
+	for (i = 0; array->array != NULL; i++) {
+		if ((prid & array->prid_mask) == array->prid_val) {
+			octeon_78xx_tree_size = cvmx_error_78xx_array_sizes[i];
+			break;
+		}
+		array++;
+	}
+
+	if (!array->array) {
+		pr_err("Error: No error tree for prid = 0x%08x\n", prid);
+		return -ENODEV;
+	}
+	pr_notice("Installing handlers for error tree at: %p\n", array->array);
+
 	octeon_ciu3_errbits_set_handler(octeon_error_tree_handler78);
-	for (i = 0; error_array_cn78xxp1[i].intsn < 0xfffff; i++)
-		/* Just count them... */;
-	octeon_78xx_tree_size = i;
+
+	octeon_78xx_error_array = array->array;
 
 	for_each_online_node(node)
-		for (i = 0; error_array_cn78xxp1[i].intsn < 0xfffff; i++)
-			if (error_array_cn78xxp1[i].error_group != CVMX_ERROR_GROUP_ETHERNET)
-				octeon_ciu3_errbits_enable_intsn(node, error_array_cn78xxp1[i].intsn);
+		for (i = 0; octeon_78xx_error_array[i].intsn < 0xfffff; i++)
+			if (octeon_78xx_error_array[i].error_group != CVMX_ERROR_GROUP_ETHERNET)
+				octeon_ciu3_errbits_enable_intsn(node, octeon_78xx_error_array[i].intsn);
 
 	return 0;
 }
-- 
2.3.5

